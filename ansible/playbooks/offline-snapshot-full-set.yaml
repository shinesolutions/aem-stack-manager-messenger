---
- name: SNS Message Sender
  hosts: all
  gather_facts: no
  connection: local

  vars:
    subject: "{{target_aem_stack_prefix}} - {{ message_type }}"
# files are in .txt as they need to replace the variables e.g. 'target_aem_stack_prefix' (un-quoted) which breaks the json validation.
# if the variables were in double quotes, they would not be replaced with the value.
    message: "{{ lookup('file', '../../files/offline-snapshot-full-set.json') }}"

  tasks:
    - name: "Get facts for Target AEM Stack {{ target_aem_stack_prefix }}"
      ec2_instance_facts:
        filters:
          "tag:StackPrefix": "{{ target_aem_stack_prefix }}"
      # To reduce the output of the playbook this outputs is suppress.
      # The value can be replaced with a debug true/false option in the future.
      no_log: True
      register: target_aem_stack_exists

    - name: "Check if Target AEM Stack {{ target_aem_stack_prefix }} exist."
      fail:
        msg: "Error: Target AEM Stack '{{ target_aem_stack_prefix }}' does not exists."
      when: target_aem_stack_exists.instances is defined and target_aem_stack_exists.instances[0] is undefined

    - set_fact:
        main_stack_name: "{{ stack_prefix }}-{{ main.stack_name }}"

    - name: "Retrieve Main Stack CloudFormation resources facts"
      cloudformation_facts:
        stack_name: "{{ main_stack_name }}"
        region: "{{ aws.region }}"
      register: main_stack_facts

    - set_fact:
        stack_manager_stack_arn: "{{ main_stack_facts.ansible_facts.cloudformation[main_stack_name].stack_outputs.StackManagerStackArn }}"

    - set_fact:
        stack_manager_stack_name: "{{ stack_manager_stack_arn.split('/')[1] }}"

    - name: "Retrieve Stack Manager CloudFormation resources facts"
      cloudformation_facts:
        stack_name: "{{ stack_manager_stack_name }}"
        region: "{{ aws.region }}"
      register: stack_manager_stack_facts

    - set_fact:
        stack_manager_stack_outputs: "{{ stack_manager_stack_facts.ansible_facts.cloudformation[stack_manager_stack_name].stack_outputs }}"
        s3_bucket: "{{ stack_manager_stack_facts.ansible_facts.cloudformation[stack_manager_stack_name].stack_parameters.DataBucketNameParameter }}"

    - set_fact:
        dynamodb_tablename: "{{ stack_manager_stack_outputs.AemStackManagerTableName }}"
        sns_topic: "{{ stack_manager_stack_outputs.BackupTopicArn }}"

    - debug:
        msg: "Send message: {{ message }}, with subject: {{ subject }}, to topic: {{ sns_topic }}, in region: {{ aws.region }}"

    - name: Query if Backup lock exist
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: command_id
        attribute_value: "{{ target_aem_stack_prefix }}_backup_lock"
        get_attribute: command_id
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: query
        region: "{{ aws.region }}"
      register: dbquery_backup_lock

    - name: Check if DB is locked
      set_fact:
        db_backup_locked: "{{dbquery_backup_lock.item[0].command_id.S}}"
      when: dbquery_backup_lock.item[0] is defined

    - name: Fail when DB is locked
      fail:
        msg: "Error: Another offline snapshot backup is running"
      when: db_backup_locked is defined

    - name: Send message to SNS Topic
      sns:
        msg: "{{ message }}"
        subject: "{{ subject }}"
        topic: "{{ sns_topic }}"
        region: "{{ aws.region }}"
      register: publish_message

    - name: Scan if author standby instance is stopped
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: message_id
        attribute_value: "{{ publish_message.item.PublishResponse.PublishResult.MessageId }}"
        get_attribute: command_id
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: scan
        region: "{{ aws.region }}"
      register: cmd_stop_author_standby
      until: cmd_stop_author_standby.item != []
      retries:  720
      delay: 5

    - set_fact:
        cmd_id_stop_author_standby: "{{ item.command_id.S }}"
      with_items:
        "{{ cmd_stop_author_standby.item }}"

    - name: Query if Author Standby Service successfully stopped
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: command_id
        attribute_value: "{{ cmd_id_stop_author_standby }}"
        get_attribute: state
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: query
        region: "{{ aws.region }}"
      register: dbquery_state_stop_author_standby

    - name: Set fact for error check
      set_fact:
        dbquery_state_failed_stop_author_standby: "{{dbquery_state_stop_author_standby.item[0].state.S}}"
      when: '"item" in dbquery_state_stop_author_standby'

    - name: Check for error when stopping Author Standby Service
      set_fact:
        error_stop_author_standby: 1
        module_error: 1
      when: dbquery_state_failed_stop_author_standby is defined and dbquery_state_failed_stop_author_standby == "Failed"

    - name: Scan if author primary instance is stopped
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: last_command
        attribute_value: "{{ cmd_id_stop_author_standby }}"
        get_attribute: command_id
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: scan
        region: "{{ aws.region }}"
      register: cmd_stop_author_primary
      until: cmd_stop_author_primary.item != []
      retries:  720
      delay: 5
      when: module_error is undefined

    - set_fact:
        cmd_id_stop_author_primary: "{{ item.command_id.S }}"
      with_items:
        "{{ cmd_stop_author_primary.item }}"
      when: module_error is undefined

    - name: Query if Author Primary Service successfully stopped
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: command_id
        attribute_value: "{{ cmd_id_stop_author_primary }}"
        get_attribute: state
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: query
        region: "{{ aws.region }}"
      register: dbquery_state_stop_author_primary
      when: module_error is undefined

    - name: Set fact for error check
      set_fact:
        dbquery_state_failed_stop_author_primary: "{{dbquery_state_stop_author_primary.item[0].state.S}}"
      when: '"item" in dbquery_state_stop_author_primary'

    - name: Check for error when stopping Author Primary Service
      set_fact:
        error_stop_author_primary: 1
        module_error: 1
      when: dbquery_state_failed_stop_author_primary is defined and dbquery_state_failed_stop_author_primary == "Failed" and module_error is undefined

    - name: Scan if publish instance is stopped
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: last_command
        attribute_value: "{{ cmd_id_stop_author_primary }}"
        get_attribute: command_id
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: scan
        region: "{{ aws.region }}"
      register: cmd_stop_publish
      until: cmd_stop_publish.item != []
      retries:  720
      delay: 5
      when: module_error is undefined

    - set_fact:
        cmd_id_stop_publish: "{{ item.command_id.S }}"
      with_items:
        "{{ cmd_stop_publish.item }}"
      when: module_error is undefined

    - name: Query if Publish Services are successfully stopped
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: command_id
        attribute_value: "{{ cmd_id_stop_publish }}"
        get_attribute: state
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: query
        region: "{{ aws.region }}"
      register: dbquery_state_stop_publish
      when: module_error is undefined

    - name: Set fact for error check
      set_fact:
        dbquery_state_failed_stop_publish: "{{dbquery_state_stop_publish.item[0].state.S}}"
      when: '"item" in dbquery_state_stop_publish'

    - name: Check for error when stopping Publish Service
      set_fact:
        error_stop_publish: 1
        module_error: 1
      when: dbquery_state_failed_stop_publish is defined and dbquery_state_failed_stop_publish == "Failed" and module_error is undefined

    - name: Scan if offline-backup is executed
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: last_command
        attribute_value: "{{ cmd_id_stop_publish }}"
        get_attribute: command_id
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: scan
        region: "{{ aws.region }}"
      register: cmd_offline_backup
      until: cmd_offline_backup.item != []
      retries:  720
      delay: 5
      when: module_error is undefined

    - set_fact:
        cmd_id_offline_backup: "{{ item.command_id.S }}"
      with_items:
        "{{ cmd_offline_backup.item }}"
      when: module_error is undefined

    - name: Query Offline-Snapshot was successful
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: command_id
        attribute_value: "{{ cmd_id_offline_backup }}"
        get_attribute: state
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: query
        region: "{{ aws.region }}"
      register: dbquery_state_offline_snapshot
      when: module_error is undefined

    - name: Set fact for error check
      set_fact:
        dbquery_state_failed_offline_snapshot: "{{dbquery_state_offline_snapshot.item[0].state.S}}"
      when: '"item" in dbquery_state_offline_snapshot'

    - name: Check for error when taking offline backup
      set_fact:
        error_offline_snapshot: 1
        module_error: 1
      when: dbquery_state_failed_offline_snapshot is defined and dbquery_state_failed_offline_snapshot == "Failed" and module_error is undefined

    - name: Scan if author primary instance is started
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: last_command
        attribute_value: "{{ cmd_id_offline_backup }}"
        get_attribute: command_id
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: scan
        region: "{{ aws.region }}"
      register: cmd_start_author_primary
      until: cmd_start_author_primary.item != []
      retries:  720
      delay: 5
      when: module_error is undefined

    - set_fact:
        cmd_id_start_author_primary: "{{ item.command_id.S }}"
      with_items:
        "{{ cmd_start_author_primary.item }}"
      when: module_error is undefined

    - name: Query if starting Author Primary Service was successful
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: command_id
        attribute_value: "{{ cmd_id_start_author_primary }}"
        get_attribute: state
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: query
        region: "{{ aws.region }}"
      register: dbquery_state_start_author_primary
      when: module_error is undefined

    - name: Set fact for error check
      set_fact:
        dbquery_state_failed_start_author_primary: "{{dbquery_state_start_author_primary.item[0].state.S}}"
      when: '"item" in dbquery_state_start_author_primary'

    - name: Check for error when starting Author Primary Service
      set_fact:
        error_start_author_primary: 1
        module_error: 1
      when: dbquery_state_failed_start_author_primary is defined and dbquery_state_failed_start_author_primary == "Failed" and module_error is undefined

    - name: Scan if author standby instance is started
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: last_command
        attribute_value: "{{ cmd_id_start_author_primary }}"
        get_attribute: command_id
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: scan
        region: "{{ aws.region }}"
      register: cmd_start_author_standby
      until: cmd_start_author_standby.item != []
      retries:  720
      delay: 5
      when: module_error is undefined

    - set_fact:
        cmd_id_start_author_standby: "{{ item.command_id.S }}"
      with_items:
        "{{ cmd_start_author_standby.item }}"
      when: module_error is undefined

    - name: Query if starting Author Standby Service was successful
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: command_id
        attribute_value: "{{ cmd_id_start_author_standby }}"
        get_attribute: state
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: query
        region: "{{ aws.region }}"
      register: dbquery_state_start_author_standby
      when: module_error is undefined

    - name: Set fact for error check
      set_fact:
        dbquery_state_failed_start_author_standby: "{{dbquery_state_start_author_standby.item[0].state.S}}"
      when: '"item" in dbquery_state_start_author_standby'

    - name: Check for error when starting Author Primary Service
      set_fact:
        error_start_author_standby: 1
        module_error: 1
      when: dbquery_state_failed_start_author_standby is defined and dbquery_state_failed_start_author_standby == "Failed" and module_error is undefined

    - name: Scan if publish instance is started
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: last_command
        attribute_value: "{{ cmd_id_start_author_standby }}"
        get_attribute: command_id
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: scan
        region: "{{ aws.region }}"
      register: cmd_start_publish
      until: cmd_start_publish.item != []
      retries:  720
      delay: 5
      when: module_error is undefined

    - set_fact:
        cmd_id_start_publish: "{{ item.command_id.S }}"
      with_items:
        "{{ cmd_start_publish.item }}"
      when: module_error is undefined

    - name: Query if starting Publish Services were successful
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: command_id
        attribute_value: "{{ cmd_id_start_publish }}"
        get_attribute: state
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: query
        region: "{{ aws.region }}"
      register: dbquery_state_start_publish
      when: module_error is undefined

    - name: Set fact for error check
      set_fact:
        dbquery_state_failed_start_publish: "{{dbquery_state_start_publish.item[0].state.S}}"
      when: '"item" in dbquery_state_start_publish'

    - name: Check for error when starting Author Primary Service
      set_fact:
        error_start_publish: 1
        module_error: 1
      when: dbquery_state_failed_start_publish is defined and dbquery_state_failed_start_publish == "Failed" and module_error is undefined

    - name: Query if offline-snapshot-full-set was successful
      dynamodb_search:
        table_name: "{{ dynamodb_tablename }}"
        attribute: command_id
        attribute_value: "{{ cmd_id_start_publish }}"
        get_attribute: state
        select: SPECIFIC_ATTRIBUTES
        comparisonoperator: EQ
        state: query
        region: "{{ aws.region }}"
      register: dbquery
      until: dbquery.item[0].state.S == "Success" or dbquery.item[0].state.S == "Failed"
      # The retry values should mirror the TTL of the ssm.send_command of the Lambda function.
      retries:  720
      delay: 5
      when: module_error is undefined

    - name: Set fact for error check
      set_fact:
        dbquery_failed: "{{dbquery.item[0].state.S}}"
      when: "'item' in dbquery"

    - name: Check if offline-snapshot-full-set failed
      set_fact:
        general_error: 1
      when: dbquery_failed is defined and dbquery_failed == "Failed" and module_error is undefined

    - name: Get path to output files of stopping Author Standby Service
      aws_s3:
        mode: list
        bucket: "{{ s3_bucket }}"
        prefix: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_stop_author_standby }}"
      register: output_files_stop_author_standby
      when: cmd_id_stop_author_standby is defined

    - name: Get path to output files of stopping Author Primary Service
      aws_s3:
        mode: list
        bucket: "{{ s3_bucket }}"
        prefix: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_stop_author_primary }}"
      register: output_files_stop_author_primary
      when: cmd_id_stop_author_primary is defined

    - name: Get path to output files of stopping Publish Service
      aws_s3:
        mode: list
        bucket: "{{ s3_bucket }}"
        prefix: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_stop_publish }}"
      register: output_files_stop_publish
      when: cmd_id_stop_publish is defined

    - name: Get path to output files of taking offline backup
      aws_s3:
        mode: list
        bucket: "{{ s3_bucket }}"
        prefix: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_offline_backup }}"
      register: output_files_offline_backup
      when: cmd_id_offline_backup is defined

    - name: Get path to output files of starting Author Primary Service
      aws_s3:
        mode: list
        bucket: "{{ s3_bucket }}"
        prefix: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_start_author_primary }}"
      register: output_files_start_author_primary
      when: cmd_id_start_author_primary is defined

    - name: Get path to output files of starting Author Standby Service
      aws_s3:
        mode: list
        bucket: "{{ s3_bucket }}"
        prefix: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_start_author_standby }}"
      register: output_files_start_author_standby
      when: cmd_id_start_author_standby is defined

    - name: Get path to output files of starting Publish Service
      aws_s3:
        mode: list
        bucket: "{{ s3_bucket }}"
        prefix: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_start_publish }}"
      register: output_files_start_publish
      when: cmd_id_start_publish is defined

    - name: Set global facts for getting command output
      set_fact:
        log_path: "{{ playbook_dir }}/../../logs/"

    - name: Set facts for getting command output of stopping Author Standby Service
      set_fact:
        dl_path_stop_author_standby: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_stop_author_standby }}"
        s3_files_stop_author_standby: "{{ output_files_stop_author_standby.s3_keys }}"
      when: error_stop_author_standby is defined or general_error is defined

    - name: Set facts for getting command output of stopping Author Primary Service
      set_fact:
        dl_path_stop_author_primary: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_stop_author_primary }}"
        s3_files_stop_author_primary: "{{ output_files_stop_author_primary.s3_keys }}"
      when: error_stop_author_primary is defined or general_error is defined

    - name: Set facts for getting command output of stopping Publish Services
      set_fact:
        dl_path_stop_publish: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_stop_publish }}"
        s3_files_stop_publish: "{{ output_files_stop_publish.s3_keys }}"
      when: error_stop_publish is defined or general_error is defined

    - name: Set facts for getting command output of taking offline Backup
      set_fact:
        dl_path_offline_backup: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_offline_backup }}"
        s3_files_offline_backup: "{{ output_files_offline_backup.s3_keys }}"
      when: error_offline_snapshot is defined or general_error is defined

    - name: Set facts for getting command output of starting Author Primary Service
      set_fact:
        dl_path_start_author_primary: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_start_author_primary }}"
        s3_files_start_author_primary: "{{ output_files_start_author_primary.s3_keys }}"
      when: error_start_author_primary is defined or general_error is defined

    - name: Set facts for getting command output of starting Author Standby Service
      set_fact:
        dl_path_start_author_standby: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_start_author_standby }}"
        s3_files_start_author_standby: "{{ output_files_start_author_standby.s3_keys }}"
      when: error_start_author_standby is defined or general_error is defined

    - name: Set facts for getting command output of starting Publish Services
      set_fact:
        dl_path_start_publish: "{{ stack_prefix }}/stack-manager/SSMOutput/{{ cmd_id_start_publish }}"
        s3_files_start_publish: "{{ output_files_start_publish.s3_keys }}"
      when: error_start_publish is defined or general_error is defined

    - name: "Create Download directory of stopping Author Standby Service"
      file:
        path: "{{ log_path }}{{ item|regex_replace('(stdout|stderr)$', '') }}"
        state: directory
      with_items:
        - "{{ s3_files_stop_author_standby }}"
      when: error_stop_author_standby is defined or general_error is defined

    - name: "Create Download directory of stopping Author Primary Service"
      file:
        path: "{{ log_path }}{{ item|regex_replace('(stdout|stderr)$', '') }}"
        state: directory
      with_items:
        - "{{ s3_files_stop_author_primary }}"
      when: error_stop_author_primary is defined or general_error is defined

    - name: "Create Download directory of stopping Publish Service"
      file:
        path: "{{ log_path }}{{ item|regex_replace('(stdout|stderr)$', '') }}"
        state: directory
      with_items:
        - "{{ s3_files_stop_publish }}"
      when: error_stop_publish is defined or general_error is defined

    - name: "Create Download directory of taking offline backup Service"
      file:
        path: "{{ log_path }}{{ item|regex_replace('(stdout|stderr)$', '') }}"
        state: directory
      with_items:
      - "{{ s3_files_offline_backup }}"
      when: error_offline_snapshot is defined or general_error is defined

    - name: "Create Download directory of starting Author Primary Service"
      file:
        path: "{{ log_path }}{{ item|regex_replace('(stdout|stderr)$', '') }}"
        state: directory
      with_items:
      - "{{ s3_files_start_author_primary }}"
      when: error_start_author_primary is defined or general_error is defined

    - name: "Create Download directory of starting Author Standby Service"
      file:
        path: "{{ log_path }}{{ item|regex_replace('(stdout|stderr)$', '') }}"
        state: directory
      with_items:
      - "{{ s3_files_start_author_standby }}"
      when: error_start_author_standby is defined or general_error is defined

    - name: "Create Download directory of starting Publish Service"
      file:
        path: "{{ log_path }}{{ item|regex_replace('(stdout|stderr)$', '') }}"
        state: directory
      with_items:
      - "{{ s3_files_start_publish }}"
      when: error_start_publish is defined or general_error is defined

    - name: "Save command output stopping Author Standby Service to {{log_path }}"
      aws_s3:
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "{{ item }}"
        dest: "{{ log_path }}{{ item }}"
      with_items:
        - "{{ s3_files_stop_author_standby }}"
      when: error_stop_author_standby is defined or general_error is defined

    - name: "Save command output stopping Author Primary Service to {{log_path }}"
      aws_s3:
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "{{ item }}"
        dest: "{{ log_path }}{{ item }}"
      with_items:
        - "{{ s3_files_stop_author_primary }}"
      when: error_stop_author_primary is defined or general_error is defined

    - name: "Save command output stopping Publish Service to {{log_path }}"
      aws_s3:
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "{{ item }}"
        dest: "{{ log_path }}{{ item }}"
      with_items:
        - "{{ s3_files_stop_publish }}"
      when: error_stop_publish is defined or general_error is defined

    - name: "Save command output taking offline backup to {{log_path }}"
      aws_s3:
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "{{ item }}"
        dest: "{{ log_path }}{{ item }}"
      with_items:
        - "{{ s3_files_offline_backup }}"
      when: error_offline_snapshot is defined or general_error is defined

    - name: "Save command output starting Author Primary Service to {{log_path }}"
      aws_s3:
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "{{ item }}"
        dest: "{{ log_path }}{{ item }}"
      with_items:
        - "{{ s3_files_start_author_primary }}"
      when: error_start_author_primary is defined or general_error is defined

    - name: "Save command output starting Author Standby Service to {{log_path }}"
      aws_s3:
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "{{ item }}"
        dest: "{{ log_path }}{{ item }}"
      with_items:
        - "{{ s3_files_start_author_standby }}"
      when: error_start_author_standby is defined or general_error is defined

    - name: "Save command output starting Publish Service to {{log_path }}"
      aws_s3:
        mode: get
        bucket: "{{ s3_bucket }}"
        object: "{{ item }}"
        dest: "{{ log_path }}{{ item }}"
      with_items:
        - "{{ s3_files_start_publish }}"
      when: error_start_publish is defined or general_error is defined

    - name: "Find error log files of stopping Author Standby Service"
      find:
        paths: "{{log_path }}{{ dl_path_stop_author_standby }}"
        file_type: file
        patterns: stderr
        recurse: yes
      register: stderr_stop_author_standby
      when: error_stop_author_standby is defined or general_error is defined

    - name: "Find error log files of stopping Author Primary Service"
      find:
        paths: "{{log_path }}{{ dl_path_stop_author_primary }}"
        file_type: file
        patterns: stderr
        recurse: yes
      register: stderr_stop_author_primary
      when: error_stop_author_primary is defined or general_error is defined

    - name: "Find error log files of stopping Publish Service"
      find:
        paths: "{{log_path }}{{ dl_path_stop_publish }}"
        file_type: file
        patterns: stderr
        recurse: yes
      register: stderr_stop_publish
      when: error_stop_publish is defined or general_error is defined

    - name: "Find error log files of taking offline backup"
      find:
        paths: "{{log_path }}{{ dl_path_offline_backup }}"
        file_type: file
        patterns: stderr
        recurse: yes
      register: stderr_offline_backup
      when: error_offline_snapshot is defined or general_error is defined

    - name: "Find error log files of starting Author Primary Service"
      find:
        paths: "{{log_path }}{{ dl_path_start_author_primary }}"
        file_type: file
        patterns: stderr
        recurse: yes
      register: stderr_start_author_primary
      when: error_start_author_primary is defined or general_error is defined

    - name: "Find error log files of starting Author Standby Service"
      find:
        paths: "{{log_path }}{{ dl_path_start_author_standby }}"
        file_type: file
        patterns: stderr
        recurse: yes
      register: stderr_start_author_standby
      when: error_start_author_standby is defined or general_error is defined

    - name: "Find error log files of starting Publish Service"
      find:
        paths: "{{log_path }}{{ dl_path_start_publish }}"
        file_type: file
        patterns: stderr
        recurse: yes
      register: stderr_path_start_publish
      when: error_start_publish is defined or general_error is defined

    - name: "Show Error Log of stopping Author Standby Service"
      log_output:
        type: file
        log_files: "{{ item.files | map(attribute='path')|list }}"
      with_items:
        - "{{stderr_stop_author_standby}}"
      when: error_stop_author_standby is defined or general_error is defined

    - name: "Show Error Log of stopping Author Primary Service"
      log_output:
        type: file
        log_files: "{{ item.files | map(attribute='path')|list }}"
      with_items:
        - "{{stderr_stop_author_primary}}"
      when: error_stop_author_primary is defined or general_error is defined

    - name: "Show Error Log of stopping Publish Service"
      log_output:
        type: file
        log_files: "{{ item.files | map(attribute='path')|list }}"
      with_items:
        - "{{stderr_stop_publish}}"
      when: error_stop_publish is defined or general_error is defined

    - name: "Show Error Log of taking offline backup"
      log_output:
        type: file
        log_files: "{{ item.files | map(attribute='path')|list }}"
      with_items:
        - "{{stderr_offline_backup}}"
      when: error_offline_snapshot is defined or general_error is defined

    - name: "Show Error Log of starting Author Primary Service"
      log_output:
        type: file
        log_files: "{{ item.files | map(attribute='path')|list }}"
      with_items:
        - "{{stderr_start_author_primary}}"
      when: error_start_author_primary is defined or general_error is defined

    - name: "Show Error Log of starting Author Standby Service"
      log_output:
        type: file
        log_files: "{{ item.files | map(attribute='path')|list }}"
      with_items:
        - "{{stderr_start_author_standby}}"
      when: error_start_author_standby is defined or general_error is defined

    - name: "Show Error Log of starting Publish Service"
      log_output:
        type: file
        log_files: "{{ item.files | map(attribute='path')|list }}"
      with_items:
        - "{{stderr_path_start_publish}}"
      when: error_start_publish is defined or general_error is defined

    - fail:
        msg: "Error: Failed executing event {{ message_type }}"
      when: general_error is defined or module_error is defined
